# general script settings
tag: incremental_w_soa_tuned
env: cross-obstacles
#choices=["maze", "hover", "obstacles", "land", "field", "land-vision"],
algo: ppo
#choices=["a2c", "ppo", "sac", "td3", "ddpg"],
obs: BOTH
# choices=["kin", "rgb", "both"],
act: RPM
exp: none
cpu: 8
stop_after_no_improvement: 10000
n_steps: 1e6
seed: 3
max_reward: 10000 # Default 1000
# PPO arguments
ppo:
  gae_lambda: 0.95
  gamma: 0.99
  ent_coef: 0.0
  learning_rate: 2.5e-4
  gradient_weight: 0.002
  hessian_approx: 0.002
  second_order: true
  policy_kwargs:
    log_std_init: -1
    ortho_init: False
    activation_fn:
      _partial_: true
      _target_: torch.nn.ReLU
    #net_arch: [512, 256, { "pi": [256, 256], "vf": [256, 256] }]

    #net_arch = [dict(pi=[64, 64], vf=[64, 64])]
    # Agents do better with the default net_arch
# Env specific settings
env_kwargs:
  difficulty: 11
  initial_xyzs: [[-0.5, 0, 0.5]]
  bounds: [[5, 1, 1], [-1, -1, 0.1]]
  collision_detection: True

  # rewards
 reward_components:
    EnterAreaReward:
      scale: 1.0
      area:
      - - 4
        - 5
      - - -1
        - 1
    OrientationReward:
      scale: 0.01
    IncreaseXRewardV2:
      scale: 1
      delta: 0.05
    BoundsReward:
      scale: 0.1
      bounds: ${env_kwargs.bounds}
    CollisionReward:
      scale: 0.1
      area: ${env_kwargs.reward_components.EnterAreaReward.area}
  # terminals
  term_components:
    # EnterAreaTerm:
    #   area: [[4, 5], [-1, 1]]
    BoundsTerm:
      bounds: ${env_kwargs.bounds}
    CollisionTerm:
      area: ${env_kwargs.reward_components.EnterAreaReward.area}
    OrientationTerm:
